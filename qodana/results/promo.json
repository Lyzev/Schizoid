{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Moderate",
  "comment": "Function 'find' could be private",
  "detailsInfo": "Reports declarations that can be made `private` to follow the encapsulation principle.\n\n**Example:**\n\n\n    class Service(val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n\nAfter the quick-fix is applied (considering there are no usages of `url` outside of `Service` class):\n\n\n    class Service(private val url: String) {\n        fun connect(): URLConnection = URL(url).openConnection()\n    }\n",
  "sources": [
    {
      "type": "file",
      "path": "src/main/kotlin/dev/lyzev/schizoid/feature/FeatureManager.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 38,
      "length": 4,
      "code": {
        "startLine": 36,
        "length": 4,
        "offset": 90,
        "surroundingCode": "     * @param alias The name of the feature.\n     */\n    inline fun <reified T : Feature> find(alias: String): T? =\n        features.filterIsInstance<T>().firstOrNull { feature -> feature.aliases.any { it.equals(alias, true) } }\n"
      }
    }
  ],
  "attributes": {
    "module": "Schizoid.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": "68389489ace352b468088e357167ad4dc99add63b80a710abff17b8e26dab2d8"
}]}